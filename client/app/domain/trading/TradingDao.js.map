{"version":3,"sources":["../../../app-src/domain/trading/TradingDao.js"],"names":["Trading","TradingDao","constructor","connection","_connection","_store","add","trading","Promise","resolve","reject","request","transaction","objectStore","onsuccess","e","onerror","console","error","target","listAll","tradings","cursor","openCursor","data","result","value","_date","_amount","_value","push","continue","removeAll","clear"],"mappings":";;;;;;AAASA,a,cAAAA,O;;;AAEF,YAAMC,UAAN,CAAiB;AACtBC,oBAAYC,UAAZ,EAAwB;AACtB,eAAKC,WAAL,GAAmBD,UAAnB;AACA,eAAKE,MAAL,GAAc,UAAd;AACD;;AAEDC,YAAIC,OAAJ,EAAa;AACX,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGbC,GAHa,CAGTC,OAHS,CAAhB;;AAKAI,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;;AAEAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,KAAR,CAAcH,EAAEI,MAAF,CAASD,KAAvB;AACAR,qBAAO,qCAAP;AACD,aAHD;AAID,WAZM,CAAP;AAaD;;AAEDU,kBAAU;AACR,iBAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMW,WAAW,EAAjB;;AAEA,kBAAMC,SAAS,KAAKlB,WAAL,CACZQ,WADY,CACA,CAAC,KAAKP,MAAN,CADA,EACe,WADf,EAEZQ,WAFY,CAEA,KAAKR,MAFL,EAGZkB,UAHY,EAAf;;AAKAD,mBAAOR,SAAP,GAAmBC,KAAK;AACtB,oBAAMS,OAAOT,EAAEI,MAAF,CAASM,MAAtB;;AAEA,kBAAID,IAAJ,EAAU;AACR,sBAAMjB,UAAU,IAAIP,OAAJ,CACdwB,KAAKE,KAAL,CAAWC,KADG,EAEdH,KAAKE,KAAL,CAAWE,OAFG,EAGdJ,KAAKE,KAAL,CAAWG,MAHG,CAAhB;;AAMAR,yBAASS,IAAT,CAAcvB,OAAd;AACAiB,qBAAKO,QAAL;AACD,eATD,MASO;AACLtB,wBAAQY,QAAR;AACD;AACF,aAfD;;AAiBAC,mBAAON,OAAP,GAAiBD,KAAK;AACpBE,sBAAQC,KAAR,CAAcH,EAAEI,MAAF,CAASD,KAAvB;AACAR,qBAAO,qCAAP;AACD,aAHD;AAID,WA7BM,CAAP;AA8BD;;AAEDsB,oBAAY;AACV,iBAAO,IAAIxB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,kBAAMC,UAAU,KAAKP,WAAL,CACbQ,WADa,CACD,CAAC,KAAKP,MAAN,CADC,EACc,WADd,EAEbQ,WAFa,CAED,KAAKR,MAFJ,EAGb4B,KAHa,EAAhB;;AAKAtB,oBAAQG,SAAR,GAAoBC,KAAKN,SAAzB;;AAEAE,oBAAQK,OAAR,GAAkBD,KAAK;AACrBE,sBAAQC,KAAR,CAAcH,EAAEI,MAAF,CAASD,KAAvB;AACAR,qBAAO,wCAAP;AACD,aAHD;AAID,WAZM,CAAP;AAaD;AArEqB","file":"TradingDao.js","sourcesContent":["import { Trading } from './Trading.js';\n\nexport class TradingDao {\n  constructor(connection) {\n    this._connection = connection;\n    this._store = 'tradings';\n  }\n\n  add(trading) {\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .add(trading);\n\n      request.onsuccess = e => resolve();\n\n      request.onerror = e => {\n        console.error(e.target.error);\n        reject('Could not possible save the trading');\n      }\n    });\n  }\n\n  listAll() {\n    return new Promise((resolve, reject) => {\n      const tradings = [];\n\n      const cursor = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .openCursor();\n\n      cursor.onsuccess = e => {\n        const data = e.target.result;\n\n        if (data) {\n          const trading = new Trading(\n            data.value._date,\n            data.value._amount,\n            data.value._value,\n          );\n\n          tradings.push(trading);\n          data.continue();\n        } else {\n          resolve(tradings)\n        }\n      };\n\n      cursor.onerror = e => {\n        console.error(e.target.error);\n        reject('Could not possible save the trading');\n      }\n    });\n  }\n\n  removeAll() {\n    return new Promise((resolve, reject) => {\n      const request = this._connection\n        .transaction([this._store], 'readwrite')\n        .objectStore(this._store)\n        .clear();\n\n      request.onsuccess = e => resolve();\n\n      request.onerror = e => {\n        console.error(e.target.error);\n        reject('Could not possible remove all tradings');\n      };\n    });\n  }\n}\n"]}