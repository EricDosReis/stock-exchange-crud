{"version":3,"sources":["../../../app-src/domain/trading/TradingService.js"],"names":["HttpService","Trading","TradingService","constructor","_http","getCurrentWeekTradings","get","then","data","tradings","map","object","Date","date","amount","value","err","Error","getPreviousWeekTradings","getDelayedWeekTradings","getAllTradings","Promise","all","periodTradings","reduce","newArray","item","concat","sort","a","b","getTime","catch"],"mappings":";;;;;;AAASA,iB,sBAAAA,W;;AACAC,a,cAAAA,O;;;AAEF,YAAMC,cAAN,CAAqB;AAC1BC,sBAAc;AACZ,eAAKC,KAAL,GAAa,IAAIJ,WAAJ,EAAb;AACD;;AAEDK,iCAAyB;AACvB,iBAAO,KAAKD,KAAL,CACJE,GADI,CACA,qBADA,EAEJC,IAFI,CAGHC,QAAQ;AACN,kBAAMC,WAAWD,KAAKE,GAAL,CAASC,UACxB,IAAIV,OAAJ,CAAY,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CAAZ,EAAmCF,OAAOG,MAA1C,EAAkDH,OAAOI,KAAzD,CADe,CAAjB;;AAGA,mBAAON,QAAP;AACD,WARE,EASHO,OAAO;AACL,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD,WAXE,CAAP;AAaD;;AAEDC,kCAA0B;AACxB,iBAAO,KAAKd,KAAL,CACJE,GADI,CACA,sBADA,EAEJC,IAFI,CAGHC,QACEA,KAAKE,GAAL,CAASC,UACP,IAAIV,OAAJ,CAAY,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CAAZ,EAAmCF,OAAOG,MAA1C,EAAkDH,OAAOI,KAAzD,CADF,CAJC,EAOHC,OAAO;AACL,kBAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD,WATE,CAAP;AAWD;;AAEDE,iCAAyB;AACvB,iBAAO,KAAKf,KAAL,CACJE,GADI,CACA,qBADA,EAEJC,IAFI,CAGHC,QACEA,KAAKE,GAAL,CAASC,UACP,IAAIV,OAAJ,CAAY,IAAIW,IAAJ,CAASD,OAAOE,IAAhB,CAAZ,EAAmCF,OAAOG,MAA1C,EAAkDH,OAAOI,KAAzD,CADF,CAJC,EAOHC,OAAO;AACL,kBAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD,WATE,CAAP;AAWD;;AAEDG,yBAAiB;AACf,iBAAOC,QAAQC,GAAR,CAAY,CACjB,KAAKjB,sBAAL,EADiB,EAEjB,KAAKa,uBAAL,EAFiB,EAGjB,KAAKC,sBAAL,EAHiB,CAAZ,EAKNZ,IALM,CAKDgB,kBAAkBA,eACrBC,MADqB,CACd,CAACC,QAAD,EAAWC,IAAX,KAAoBD,SAASE,MAAT,CAAgBD,IAAhB,CADN,EAC6B,EAD7B,EAErBE,IAFqB,CAEhB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,EAAEjB,IAAF,CAAOkB,OAAP,KAAmBF,EAAEhB,IAAF,CAAOkB,OAAP,EAFb,CALjB,EASNC,KATM,CASAhB,OAAO;AACZ,kBAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,WAXM,CAAP;AAYD;;AA9DyB","file":"TradingService.js","sourcesContent":["import { HttpService } from '../../util/HttpService.js';\nimport { Trading } from './Trading.js';\n\nexport class TradingService {\n  constructor() {\n    this._http = new HttpService();\n  }\n\n  getCurrentWeekTradings() {\n    return this._http\n      .get('trading/currentWeek')\n      .then(\n        data => {\n          const tradings = data.map(object =>\n            new Trading(new Date(object.date), object.amount, object.value));\n\n          return tradings;\n        },\n        err => {\n          throw new Error('Could not get tradings from the current week');\n        }\n      );\n  }\n\n  getPreviousWeekTradings() {\n    return this._http\n      .get('trading/previousWeek')\n      .then(\n        data =>\n          data.map(object =>\n            new Trading(new Date(object.date), object.amount, object.value))\n        ,\n        err => {\n          throw new Error('Could not get tradings from the previous week');\n        }\n      );\n  }\n\n  getDelayedWeekTradings() {\n    return this._http\n      .get('trading/delayedWeek')\n      .then(\n        data => \n          data.map(object => \n            new Trading(new Date(object.date), object.amount, object.value))\n        ,\n        err => {\n          throw new Error('Could not get tradings from the delayed week');\n        }\n      );\n  }\n\n  getAllTradings() {\n    return Promise.all([\n      this.getCurrentWeekTradings(),\n      this.getPreviousWeekTradings(),\n      this.getDelayedWeekTradings(),\n    ])\n    .then(periodTradings => periodTradings\n      .reduce((newArray, item) => newArray.concat(item), [])\n      .sort((a, b) => b.date.getTime() - a.date.getTime())\n    )\n    .catch(err => {\n      throw new Error('Could not get tradings')\n    });\n  }\n\n}\n"]}