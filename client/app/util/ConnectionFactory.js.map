{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["stores","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","error","name","closeConnection","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,YAAMA,SAAS,CAAC,UAAD,CAAf;AACA,UAAIC,aAAa,IAAjB;AACA,UAAIC,QAAQ,IAAZ;;UAEaC,iB,GAAN,MAAMA,iBAAN,CAAwB;AAC7BC,sBAAc;AACZ,gBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,eAAOC,aAAP,GAAuB;AACrB,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,gBAAIR,UAAJ,EAAgB;AACd,qBAAOO,QAAQP,UAAR,CAAP;AACD;;AAED,kBAAMS,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wBAAYG,eAAZ,GAA8BC,KAAK;AACjCX,gCAAkBY,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACD,aAFD;;AAIAP,wBAAYQ,SAAZ,GAAwBJ,KAAK;AAC3Bb,2BAAaa,EAAEE,MAAF,CAASC,MAAtB;;AAEAf,sBAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;;AAEAA,yBAAWC,KAAX,GAAmB,MAAM;AACvB,sBAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACD,eAFD;;AAIAG,sBAAQP,UAAR;AACD,aAVD;;AAYAS,wBAAYU,OAAZ,GAAsBN,KAAK;AACzBL,qBAAOK,EAAEE,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACD,aAFD;AAGD,WA1BM,CAAP;AA2BD;;AAED,eAAOC,eAAP,GAAyB;AACvB,cAAItB,UAAJ,EAAgB;AACdC;AACD;AACF;;AAED,eAAOa,aAAP,CAAqBd,UAArB,EAAiC;AAC/BD,iBAAOwB,OAAP,CAAeC,SAAS;AACtB,gBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EAAiD;AAC/CxB,yBAAW2B,iBAAX,CAA6BH,KAA7B;AACD;;AAEDxB,uBAAW4B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACD,WAND;AAOD;AAjD4B,O","file":"ConnectionFactory.js","sourcesContent":["const stores = ['tradings'];\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory {\n  constructor() {\n    throw new Error('ConnectionFactory class cannot be instantiated');\n  }\n\n  static getConnection() {\n    return new Promise((resolve, reject) => {\n      if (connection) {\n        return resolve(connection);\n      }\n\n      const openRequest = indexedDB.open('jscangaceiro', 2);\n\n      openRequest.onupgradeneeded = e => {\n        ConnectionFactory._createStores(e.target.result);\n      };\n\n      openRequest.onsuccess = e => {\n        connection = e.target.result;\n\n        close = connection.close.bind(connection);\n        \n        connection.close = () => {\n          throw new Error('The connection cannot be closed directly');\n        };\n\n        resolve(connection);\n      };\n\n      openRequest.onerror = e => {\n        reject(e.target.error.name);\n      };\n    });\n  }\n\n  static closeConnection() {\n    if (connection) {\n      close();\n    }\n  }\n\n  static _createStores(connection) {\n    stores.forEach(store => {\n      if (connection.objectStoreNames.contains(store)) {\n        connection.deleteObjectStore(store);\n      }\n\n      connection.createObjectStore(store, { autoIncrement: true });\n    });\n  }\n}\n"]}