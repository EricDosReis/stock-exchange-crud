{"version":3,"sources":["../../app-src/controllers/TradingController.js"],"names":["Tradings","TradingService","Trading","TradingsView","MessageView","Message","InvalidDateException","DateConverter","getTradingDao","Bind","TradingController","constructor","$","document","querySelector","bind","_inputDate","_inputAmount","_inputValue","_tradings","_message","_service","_init","add","event","preventDefault","trading","_createTrading","then","dao","text","_clearForm","catch","err","message","removeAll","clear","importTradings","getAllTradings","tradings","filter","newTrading","toArray","some","existingTrading","equals","forEach","listAll","toDate","value","parseInt","parseFloat","focus"],"mappings":"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","file":"TradingController.js","sourcesContent":["import { Tradings, TradingService, Trading } from '../domain/index.js';\nimport { TradingsView, MessageView, Message, InvalidDateException, DateConverter } from '../ui/index.js';\nimport { getTradingDao, Bind } from '../util/index.js';\n\nexport class TradingController {\n  constructor() {\n    const $ = document.querySelector.bind(document);\n\n    this._inputDate = $('#date');\n    this._inputAmount = $('#amount');\n    this._inputValue = $('#value');\n\n    this._tradings = new Bind(\n      new Tradings(),\n      new TradingsView('#tradings'),\n      'add', \n      'clear',\n    );\n\n    this._message = new Bind(\n      new Message(),\n      new MessageView('#message'),\n      'text',\n    );\n\n    this._service = new TradingService();\n    this._init();\n  }\n\n  add(event) {\n    try {\n      event.preventDefault();\n\n      const trading = this._createTrading();\n\n      getTradingDao()\n        .then(dao => dao.add(trading))\n        .then(() => {\n          this._tradings.add(trading);\n          this._message.text = 'Trading added successfully';\n          this._clearForm();\n        })\n        .catch(err => this._message.text = err);\n    } catch (err) {\n      if (err instanceof InvalidDateException) {\n        this._message.text = err.message;\n      } else {\n        this._message.text = 'An unexpected error occurred';\n      }\n    }\n  }\n\n  removeAll(event) {\n    getTradingDao()\n      .then(dao => dao.removeAll())\n      .then(() => {\n        this._tradings.clear();\n        this._message.text = 'Tradings removed successfully';\n      })\n      .catch(err => this._message.text = err);\n  }\n\n  importTradings() {\n    this._service.getAllTradings()\n      .then(tradings => {\n        tradings\n          .filter(newTrading => {\n            return !this._tradings.toArray().some((existingTrading) => {\n              return newTrading.equals(existingTrading);\n            })\n          })\n          .forEach(trading => this._tradings.add(trading));\n      })\n      .catch(err => this._message.text = err);\n  }\n\n  _init() {\n    getTradingDao()\n      .then(dao => dao.listAll())\n      .then(tradings =>\n        tradings.forEach(trading =>\n          this._tradings.add(trading)))\n      .catch(err => this._message.text = err);\n  }\n\n  _createTrading() {\n    return new Trading(\n      DateConverter.toDate(this._inputDate.value),\n      parseInt(this._inputAmount.value),\n      parseFloat(this._inputValue.value),\n    );\n  }\n\n  _clearForm() {\n    this._inputDate.value = '';\n    this._inputAmount.value = 1;\n    this._inputValue.value = 0.0;\n    this._inputDate.focus();\n  }\n}\n"]}