{"version":3,"sources":["../../app-src/controllers/TradingController.js"],"names":["Tradings","TradingService","Trading","TradingsView","MessageView","Message","InvalidDateException","DateConverter","getTradingDao","Bind","getExceptionMessage","TradingController","constructor","$","document","querySelector","bind","_inputDate","_inputAmount","_inputValue","_tradings","_message","_service","_init","add","event","preventDefault","trading","_createTrading","dao","text","_clearForm","err","removeAll","clear","importTradings","tradings","getAllTradings","filter","toArray","some","existingTrading","newTrading","equals","forEach","listAll","toDate","value","parseInt","parseFloat","focus"],"mappings":"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","file":"TradingController.js","sourcesContent":["import { Tradings, TradingService, Trading } from '../domain/index.js';\nimport { TradingsView, MessageView, Message, InvalidDateException, DateConverter } from '../ui/index.js';\nimport { getTradingDao, Bind, getExceptionMessage } from '../util/index.js';\n\nexport class TradingController {\n  constructor() {\n    const $ = document.querySelector.bind(document);\n\n    this._inputDate = $('#date');\n    this._inputAmount = $('#amount');\n    this._inputValue = $('#value');\n\n    this._tradings = new Bind(\n      new Tradings(),\n      new TradingsView('#tradings'),\n      'add', \n      'clear',\n    );\n\n    this._message = new Bind(\n      new Message(),\n      new MessageView('#message'),\n      'text',\n    );\n\n    this._service = new TradingService();\n    this._init();\n  }\n\n  async add(event) {\n    try {\n      event.preventDefault();\n\n      const trading = this._createTrading();\n\n      const dao = await getTradingDao();\n      await dao.add(trading);\n\n      this._tradings.add(trading);\n      this._message.text = 'Trading added successfully';\n      this._clearForm();\n    } catch (err) {\n      this._message.text = getExceptionMessage(err);\n    }\n  }\n\n  async removeAll() {\n    try {\n      const dao = await getTradingDao();\n      await dao.removeAll();\n\n      this._tradings.clear();\n      this._message.text = 'Tradings removed successfully';\n    } catch (err) {\n      this._message.text = getExceptionMessage(err);\n    }\n  }\n\n  async importTradings() {\n    try {\n      const tradings = await this._service.getAllTradings();\n\n      tradings\n        .filter(newTrading => {\n          return !this._tradings.toArray().some((existingTrading) => {\n            return newTrading.equals(existingTrading);\n          })\n        })\n        .forEach(trading => this._tradings.add(trading));\n    } catch (err) {\n      this._message.text = getExceptionMessage(err);\n    }\n  }\n\n  async _init() {\n    try {\n      const dao = await getTradingDao();\n      const tradings = await dao.listAll();\n\n      tradings.forEach(trading => this._tradings.add(trading))\n    } catch (err) {\n      this._message.text = getExceptionMessage(err);\n    }\n  }\n\n  _createTrading() {\n    return new Trading(\n      DateConverter.toDate(this._inputDate.value),\n      parseInt(this._inputAmount.value),\n      parseFloat(this._inputValue.value),\n    );\n  }\n\n  _clearForm() {\n    this._inputDate.value = '';\n    this._inputAmount.value = 1;\n    this._inputValue.value = 0.0;\n    this._inputDate.focus();\n  }\n}\n"]}